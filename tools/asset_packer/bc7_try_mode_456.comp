#version 460

const uint aWeight[3][16] = { {0,  4,  9, 13, 17, 21, 26, 30, 34, 38, 43, 47, 51, 55, 60, 64},
                              {0,  9, 18, 27, 37, 46, 55, 64,  0,  0,  0,  0,  0,  0,  0,  0},
                              {0, 21, 43, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0} };

                                                      //4 bit index: 0, 4, 9, 13, 17, 21, 26, 30, 34, 38, 43, 47, 51, 55, 60, 64
const uint aStep[3][64] = { { 0, 0, 0, 1, 1, 1, 1, 2,
                              2, 2, 2, 2, 3, 3, 3, 3,
                              4, 4, 4, 4, 5, 5, 5, 5,
                              6, 6, 6, 6, 6, 7, 7, 7,
                              7, 8, 8, 8, 8, 9, 9, 9,
                              9,10,10,10,10,10,11,11,
                              11,11,12,12,12,12,13,13,
                              13,13,14,14,14,14,15,15 },
                        //3 bit index: 0, 9, 18, 27, 37, 46, 55, 64
                              { 0,0,0,0,0,1,1,1,
                              1,1,1,1,1,1,2,2,
                              2,2,2,2,2,2,2,3,
                              3,3,3,3,3,3,3,3,
                              3,4,4,4,4,4,4,4,
                              4,4,5,5,5,5,5,5,
                              5,5,5,6,6,6,6,6,
                              6,6,6,6,7,7,7,7 },
                        //2 bit index: 0, 21, 43, 64
                              { 0,0,0,0,0,0,0,0,
                              0,0,0,1,1,1,1,1,
                              1,1,1,1,1,1,1,1,
                              1,1,1,1,1,1,1,1,
                              1,2,2,2,2,2,2,2,
                              2,2,2,2,2,2,2,2,
                              2,2,2,2,2,2,3,3,
                              3,3,3,3,3,3,3,3 } };

layout(push_constant) uniform PushConstants {
    uint tex_width;
    uint num_block_x;
    uint format;
    uint mode_id;
    uint start_block_id;
    uint num_total_blocks;
    float alpha_weight;
} push_constants;

layout(set = 0, binding = 0, rgba8ui) uniform readonly uimage2D g_Input; 

layout(std430, set = 0, binding = 2) restrict writeonly buffer OutBuff
{
  	uvec4 g_OutBuff[];  
};

#define THREAD_GROUP_SIZE	64
#define BLOCK_SIZE_Y		4
#define BLOCK_SIZE_X		4
#define BLOCK_SIZE			(BLOCK_SIZE_Y * BLOCK_SIZE_X)

struct BufferShared
{
    uvec4 pixel;
    uint error;
    uint mode;
    uint partition_id;
    uint index_selector;
    uint rotation;
    uvec4 endPoint_low;
    uvec4 endPoint_high;
    uvec4 endPoint_low_quantized;
    uvec4 endPoint_high_quantized;
};
shared BufferShared shared_temp[THREAD_GROUP_SIZE];

struct Matrix2x4
{
    uvec4 rows[2];
};

Matrix2x4 compress_endpoints0( inout Matrix2x4 endPoint, uvec2 P );
Matrix2x4 compress_endpoints1( inout Matrix2x4 endPoint, uvec2 P );
Matrix2x4 compress_endpoints2( inout Matrix2x4 endPoint );
Matrix2x4 compress_endpoints3( inout Matrix2x4 endPoint, uvec2 P );
Matrix2x4 compress_endpoints4( inout Matrix2x4 endPoint );
Matrix2x4 compress_endpoints5( inout Matrix2x4 endPoint );
Matrix2x4 compress_endpoints6(inout Matrix2x4 endPoint, uvec2 P);
Matrix2x4 compress_endpoints7( inout Matrix2x4 endPoint, uvec2 P );

void swap(inout uvec4 lhs, inout uvec4 rhs)
{
    uvec4 tmp = lhs;
    lhs = rhs;
    rhs = tmp;
}
void swap(inout uvec3 lhs, inout uvec3 rhs)
{
    uvec3 tmp = lhs;
    lhs = rhs;
    rhs = tmp;
}
void swap(inout uint lhs, inout uint rhs)
{
    uint tmp = lhs;
    lhs = rhs;
    rhs = tmp;
}

uint ComputeError(in uvec4 a, in uvec4 b)
{		
	return uint(dot(a.rgb, b.rgb) + push_constants.alpha_weight * a.a*b.a);
}

void Ensure_A_Is_Larger( inout uvec4 a, inout uvec4 b )
{
    if ( a.x < b.x )
        swap( a.x, b.x );
    if ( a.y < b.y )
        swap( a.y, b.y );
    if ( a.z < b.z )
        swap( a.z, b.z );
    if ( a.w < b.w )
        swap( a.w, b.w );
}

layout (local_size_x = THREAD_GROUP_SIZE) in;
void main()
{
    // we process 4 BC blocks per thread group
    const uint MAX_USED_THREAD = 16;                                                // pixels in a BC (block compressed) block
    uint BLOCK_IN_GROUP = THREAD_GROUP_SIZE / MAX_USED_THREAD;                      // the number of BC blocks a thread group processes = 64 / 16 = 4
    uint blockInGroup = gl_LocalInvocationIndex / MAX_USED_THREAD;                                       // what BC block this thread is on within this thread group
    uint blockID = push_constants.start_block_id + gl_WorkGroupID.x * BLOCK_IN_GROUP + blockInGroup;    // what global BC block this thread is on
    uint threadBase = blockInGroup * MAX_USED_THREAD;                               // the first id of the pixel in this BC block in this thread group
    uint threadInBlock = gl_LocalInvocationIndex - threadBase;      
    
    if (blockID >= push_constants.num_total_blocks)
    {
        return;
    }

    uint block_y = blockID / push_constants.num_block_x;
    uint block_x = blockID - block_y * push_constants.num_block_x;
    uint base_x = block_x * BLOCK_SIZE_X;
    uint base_y = block_y * BLOCK_SIZE_Y;
    
    if (threadInBlock < 16)
    {
        ivec2 coord = ivec2(base_x + threadInBlock % 4, base_y + threadInBlock / 4);
        shared_temp[gl_LocalInvocationIndex].pixel = imageLoad(g_Input, coord);

        shared_temp[gl_LocalInvocationIndex].endPoint_low = shared_temp[gl_LocalInvocationIndex].pixel;
        shared_temp[gl_LocalInvocationIndex].endPoint_high = shared_temp[gl_LocalInvocationIndex].pixel;
    }
    if (threadInBlock < 8)
    {
        shared_temp[gl_LocalInvocationIndex].endPoint_low = min(shared_temp[gl_LocalInvocationIndex].endPoint_low, shared_temp[gl_LocalInvocationIndex + 8].endPoint_low);
        shared_temp[gl_LocalInvocationIndex].endPoint_high = max(shared_temp[gl_LocalInvocationIndex].endPoint_high, shared_temp[gl_LocalInvocationIndex + 8].endPoint_high);
    }
    if (threadInBlock < 4)
    {
        shared_temp[gl_LocalInvocationIndex].endPoint_low = min(shared_temp[gl_LocalInvocationIndex].endPoint_low, shared_temp[gl_LocalInvocationIndex + 4].endPoint_low);
        shared_temp[gl_LocalInvocationIndex].endPoint_high = max(shared_temp[gl_LocalInvocationIndex].endPoint_high, shared_temp[gl_LocalInvocationIndex + 4].endPoint_high);
    }
    if (threadInBlock < 2)
    {
        shared_temp[gl_LocalInvocationIndex].endPoint_low = min(shared_temp[gl_LocalInvocationIndex].endPoint_low, shared_temp[gl_LocalInvocationIndex + 2].endPoint_low);
        shared_temp[gl_LocalInvocationIndex].endPoint_high = max(shared_temp[gl_LocalInvocationIndex].endPoint_high, shared_temp[gl_LocalInvocationIndex + 2].endPoint_high);
    }
    if (threadInBlock < 1)
    {
        shared_temp[gl_LocalInvocationIndex].endPoint_low = min(shared_temp[gl_LocalInvocationIndex].endPoint_low, shared_temp[gl_LocalInvocationIndex + 1].endPoint_low);
        shared_temp[gl_LocalInvocationIndex].endPoint_high = max(shared_temp[gl_LocalInvocationIndex].endPoint_high, shared_temp[gl_LocalInvocationIndex + 1].endPoint_high);
    }

    Matrix2x4 endPoint;
    endPoint.rows[0] = shared_temp[threadBase].endPoint_low;
    endPoint.rows[1] = shared_temp[threadBase].endPoint_high;

    uint error = 0xFFFFFFFF;
    uint mode = 0;
    uint index_selector = 0;
    uint rotation = 0;

    uvec2 indexPrec;
    if (threadInBlock < 8) // all threads of threadInBlock < 8 will be working on trying out mode 4, since only mode 4 has index selector bit
    {
        if (0 == (threadInBlock & 1)) // thread 0, 2, 4, 6
        {
            //2 represents 2bit index precision; 1 represents 3bit index precision
            index_selector = 0;
            indexPrec = uvec2( 2, 1 );
        }
        else                          // thread 1, 3, 5, 7
        {
            //2 represents 2bit index precision; 1 represents 3bit index precision
            index_selector = 1;
            indexPrec = uvec2( 1, 2 );
        }
    }
    else
    {
         //2 represents 2bit index precision
        indexPrec = uvec2( 2, 2 );
    }

    uvec4 pixel_r;
    uint color_index;
    uint alpha_index;
    ivec4 span;
    ivec2 span_norm_sqr;
    ivec2 dotProduct;
    if (threadInBlock < 12) // Try mode 4 5 in threads 0..11
    {
        // mode 4 5 have component rotation
        if ((threadInBlock < 2) || (8 == threadInBlock))       // rotation = 0 in thread 0, 1
        {
            rotation = 0;
        }
        else if ((threadInBlock < 4) || (9 == threadInBlock))  // rotation = 1 in thread 2, 3
        {
            endPoint.rows[0].ra = endPoint.rows[0].ar;
            endPoint.rows[1].ra = endPoint.rows[1].ar;

            rotation = 1;
        }
        else if ((threadInBlock < 6) || (10 == threadInBlock)) // rotation = 2 in thread 4, 5
        {
            endPoint.rows[0].ga = endPoint.rows[0].ag;
            endPoint.rows[1].ga = endPoint.rows[1].ag;

            rotation = 2;
        }
        else if ((threadInBlock < 8) || (11 == threadInBlock)) // rotation = 3 in thread 6, 7
        {
            endPoint.rows[0].ba = endPoint.rows[0].ab;
            endPoint.rows[1].ba = endPoint.rows[1].ab;

            rotation = 3;
        }

        if (threadInBlock < 8)  // try mode 4 in threads 0..7
        {
            // mode 4 thread distribution
            // Thread           0	1	2	3	4	5	6	7
            // Rotation	        0	0	1	1	2	2	3	3
            // Index selector   0	1	0	1	0	1	0	1

            mode = 4;
            compress_endpoints4( endPoint );
        }
        else                    // try mode 5 in threads 8..11
        {
            // mode 5 thread distribution
            // Thread	 8	9  10  11
            // Rotation	 0	1   2   3

            mode = 5;
            compress_endpoints5( endPoint );
        }

        uvec4 pixel = shared_temp[threadBase + 0].pixel;
        if (1 == rotation)
        {
            pixel.ra = pixel.ar;
        }
        else if (2 == rotation)
        {
            pixel.ga = pixel.ag;
        }
        else if (3 == rotation)
        {
            pixel.ba = pixel.ab;
        }

        span = ivec4(endPoint.rows[1] - endPoint.rows[0]);
        span_norm_sqr = ivec2( dot( span.rgb, span.rgb ), span.a * span.a );
        
        // in mode 4 5 6, end point 0 must be closer to pixel 0 than end point 1, because of the fix-up index is always index 0
        // TODO: this shouldn't be necessary here in error calculation
        /*
        dotProduct = ivec2( dot( span.rgb, pixel.rgb - endPoint.rows[0].rgb ), span.a * ( pixel.a - endPoint.rows[0].a ) );
        if ( span_norm_sqr.x > 0 && dotProduct.x > 0 && uint( dotProduct.x * 63.49999 ) > uint( 32 * span_norm_sqr.x ) )
        {
            span.rgb = -span.rgb;
            swap(endPoint.rows[0].rgb, endPoint.rows[1].rgb);
        }
        if ( span_norm_sqr.y > 0 && dotProduct.y > 0 && uint( dotProduct.y * 63.49999 ) > uint( 32 * span_norm_sqr.y ) )
        {
            span.a = -span.a;
            swap(endPoint.rows[0].a, endPoint.rows[1].a);
        }
        */
	
        // should be the same as above
        dotProduct = ivec2( dot( pixel.rgb - endPoint.rows[0].rgb, pixel.rgb - endPoint.rows[0].rgb ), dot( pixel.rgb - endPoint.rows[1].rgb, pixel.rgb - endPoint.rows[1].rgb ) );
        if ( dotProduct.x > dotProduct.y )
        {
            span.rgb = -span.rgb;
            swap(endPoint.rows[0].rgb, endPoint.rows[1].rgb);
        }
        dotProduct = ivec2( dot( pixel.a - endPoint.rows[0].a, pixel.a - endPoint.rows[0].a ), dot( pixel.a - endPoint.rows[1].a, pixel.a - endPoint.rows[1].a ) );
        if ( dotProduct.x > dotProduct.y )
        {
            span.a = -span.a;
            swap(endPoint.rows[0].a, endPoint.rows[1].a);
        }

        error = 0;
        for ( uint i = 0; i < 16; i ++ )
        {
            pixel = shared_temp[threadBase + i].pixel;
            if (1 == rotation)
            {
                pixel.ra = pixel.ar;
            }
            else if (2 == rotation)
            {
                pixel.ga = pixel.ag;
            }
            else if (3 == rotation)
            {
                pixel.ba = pixel.ab;
            }

            dotProduct.x = int(dot( span.rgb, pixel.rgb - endPoint.rows[0].rgb ));
            color_index = ( span_norm_sqr.x <= 0 /*endPoint.rows[0] == endPoint.rows[1]*/ || dotProduct.x <= 0 /*pixel == endPoint.rows[0]*/ ) ? 0
                : ( ( dotProduct.x < span_norm_sqr.x ) ? aStep[indexPrec.x][ uint( dotProduct.x * 63.49999 / span_norm_sqr.x ) ] : aStep[indexPrec.x][63] );
            dotProduct.y = int(dot( span.a, pixel.a - endPoint.rows[0].a ));
            alpha_index = ( span_norm_sqr.y <= 0 || dotProduct.y <= 0 ) ? 0
                : ( ( dotProduct.y < span_norm_sqr.y ) ? aStep[indexPrec.y][ uint( dotProduct.y * 63.49999 / span_norm_sqr.y ) ] : aStep[indexPrec.y][63] );

            // the same color_index and alpha_index should be used for reconstruction, so this should be left commented out
            /*if (index_selector)
            {
                swap(color_index, alpha_index);
            }*/

            pixel_r.rgb = ( ( 64 - aWeight[indexPrec.x][color_index] ) * endPoint.rows[0].rgb +
                            aWeight[indexPrec.x][color_index] * endPoint.rows[1].rgb + 
                            32 ) >> 6;
            pixel_r.a = ( ( 64 - aWeight[indexPrec.y][alpha_index] ) * endPoint.rows[0].a + 
                          aWeight[indexPrec.y][alpha_index] * endPoint.rows[1].a + 
                          32 ) >> 6;

            Ensure_A_Is_Larger( pixel_r, pixel );
            pixel_r -= pixel;
            if (1 == rotation)
            {
                pixel_r.ra = pixel_r.ar;
            }
            else if (2 == rotation)
            {
                pixel_r.ga = pixel_r.ag;
            }
            else if (3 == rotation)
            {
                pixel_r.ba = pixel_r.ab;
            }
            error += ComputeError(pixel_r, pixel_r);
        }
    }
    else if (threadInBlock < 16) // Try mode 6 in threads 12..15, since in mode 4 5 6, only mode 6 has p bit
    {
        uint p = threadInBlock - 12;

        compress_endpoints6( endPoint, uvec2(p >> 0, p >> 1) & 1 );

        uvec4 pixel = shared_temp[threadBase + 0].pixel;

        span = ivec4(endPoint.rows[1] - endPoint.rows[0]);
        span_norm_sqr = ivec2(dot( span, span ));
        dotProduct = ivec2(dot( span, pixel - endPoint.rows[0] ));
        if ( span_norm_sqr.x > 0 && dotProduct.x >= 0 && uint( dotProduct.x * 63.49999 ) > uint( 32 * span_norm_sqr.x ) )
        {
            span = -span;
            swap(endPoint.rows[0], endPoint.rows[1]);
        }
            
        error = 0;
        for ( uint i = 0; i < 16; i ++ )
        {
            pixel = shared_temp[threadBase + i].pixel;
            
            dotProduct.x = int(dot( span, pixel - endPoint.rows[0] ));
            color_index = ( span_norm_sqr.x <= 0 || dotProduct.x <= 0 ) ? 0
                : ( ( dotProduct.x < span_norm_sqr.x ) ? aStep[0][ uint( dotProduct.x * 63.49999 / span_norm_sqr.x ) ] : aStep[0][63] );
            
            pixel_r = ( ( 64 - aWeight[0][color_index] ) * endPoint.rows[0]
                + aWeight[0][color_index] * endPoint.rows[1] + 32 ) >> 6;
        
            Ensure_A_Is_Larger( pixel_r, pixel );
            pixel_r -= pixel;
            error += ComputeError(pixel_r, pixel_r);
        }

        mode = 6;
        rotation = p;    // Borrow rotation for p
    }

    shared_temp[gl_LocalInvocationIndex].error = error;
    shared_temp[gl_LocalInvocationIndex].mode = mode;
    shared_temp[gl_LocalInvocationIndex].index_selector = index_selector;
    shared_temp[gl_LocalInvocationIndex].rotation = rotation;
    
    if (threadInBlock < 8)
    {
        if ( shared_temp[gl_LocalInvocationIndex].error > shared_temp[gl_LocalInvocationIndex + 8].error )
        {
            shared_temp[gl_LocalInvocationIndex].error = shared_temp[gl_LocalInvocationIndex + 8].error;
            shared_temp[gl_LocalInvocationIndex].mode = shared_temp[gl_LocalInvocationIndex + 8].mode;
            shared_temp[gl_LocalInvocationIndex].index_selector = shared_temp[gl_LocalInvocationIndex + 8].index_selector;
            shared_temp[gl_LocalInvocationIndex].rotation = shared_temp[gl_LocalInvocationIndex + 8].rotation;
        }
    }
    if (threadInBlock < 4)
    {
        if ( shared_temp[gl_LocalInvocationIndex].error > shared_temp[gl_LocalInvocationIndex + 4].error )
        {
            shared_temp[gl_LocalInvocationIndex].error = shared_temp[gl_LocalInvocationIndex + 4].error;
            shared_temp[gl_LocalInvocationIndex].mode = shared_temp[gl_LocalInvocationIndex + 4].mode;
            shared_temp[gl_LocalInvocationIndex].index_selector = shared_temp[gl_LocalInvocationIndex + 4].index_selector;
            shared_temp[gl_LocalInvocationIndex].rotation = shared_temp[gl_LocalInvocationIndex + 4].rotation;
        }
    }
    if (threadInBlock < 2)
    {
        if ( shared_temp[gl_LocalInvocationIndex].error > shared_temp[gl_LocalInvocationIndex + 2].error )
        {
            shared_temp[gl_LocalInvocationIndex].error = shared_temp[gl_LocalInvocationIndex + 2].error;
            shared_temp[gl_LocalInvocationIndex].mode = shared_temp[gl_LocalInvocationIndex + 2].mode;
            shared_temp[gl_LocalInvocationIndex].index_selector = shared_temp[gl_LocalInvocationIndex + 2].index_selector;
            shared_temp[gl_LocalInvocationIndex].rotation = shared_temp[gl_LocalInvocationIndex + 2].rotation;
        }
    }
    if (threadInBlock < 1)
    {
        if ( shared_temp[gl_LocalInvocationIndex].error > shared_temp[gl_LocalInvocationIndex + 1].error )
        {
            shared_temp[gl_LocalInvocationIndex].error = shared_temp[gl_LocalInvocationIndex + 1].error;
            shared_temp[gl_LocalInvocationIndex].mode = shared_temp[gl_LocalInvocationIndex + 1].mode;
            shared_temp[gl_LocalInvocationIndex].index_selector = shared_temp[gl_LocalInvocationIndex + 1].index_selector;
            shared_temp[gl_LocalInvocationIndex].rotation = shared_temp[gl_LocalInvocationIndex + 1].rotation;
        }

        g_OutBuff[blockID] = uvec4(shared_temp[gl_LocalInvocationIndex].error, (shared_temp[gl_LocalInvocationIndex].index_selector << 31) | shared_temp[gl_LocalInvocationIndex].mode,
            0, shared_temp[gl_LocalInvocationIndex].rotation); // rotation is indeed rotation for mode 4 5. for mode 6, rotation is p bit
    }
}

uint quantize( uint color, uint uPrec )
{
	return (((color << 8) + color) * ((1 << uPrec) - 1) + 32768) >> 16;
}
uvec4 quantize( uvec4 color, uint uPrec )
{
	return (((color << 8) + color) * ((1 << uPrec) - 1) + 32768) >> 16;
}
uint unquantize( uint color, uint uPrec )
{
    color = color << (8 - uPrec);
    return color | (color >> uPrec);
}
uvec4 unquantize( uvec4 color, uint uPrec )
{
    color = color << (8 - uPrec);
    return color | (color >> uPrec);
}

Matrix2x4 compress_endpoints0( inout Matrix2x4 endPoint, uvec2 P )
{
    Matrix2x4 quantized;
    for ( uint j = 0; j < 2; j ++ )
    {
        quantized.rows[j].rgb = quantize(endPoint.rows[j].rgbb, 5).rgb & 0xFFFFFFFE;
	    quantized.rows[j].rgb |= P[j];
        quantized.rows[j].a = 0xFF;

        endPoint.rows[j].rgb = unquantize(quantized.rows[j].rgbb, 5).rgb;
        endPoint.rows[j].a = 0xFF;

        quantized.rows[j] <<= 3;
    }
    return quantized;
}
Matrix2x4 compress_endpoints1( inout Matrix2x4 endPoint, uvec2 P )
{
    Matrix2x4 quantized;
    for ( uint j = 0; j < 2; j ++ )
    {
        quantized.rows[j].rgb = quantize(endPoint.rows[j].rgbb, 7).rgb & 0xFFFFFFFE;
	    quantized.rows[j].rgb |= P[j];
        quantized.rows[j].a = 0xFF;

        endPoint.rows[j].rgb = unquantize(quantized.rows[j].rgbb, 7).rgb;
	    endPoint.rows[j].a = 0xFF;

        quantized.rows[j] <<= 1;
    }
    return quantized;
}
Matrix2x4 compress_endpoints2( inout Matrix2x4 endPoint )
{
    Matrix2x4 quantized;
    for ( uint j = 0; j < 2; j ++ )
    {
        quantized.rows[j].rgb = quantize(endPoint.rows[j].rgbb, 5).rgb;
        quantized.rows[j].a = 0xFF;

        endPoint.rows[j].rgb = unquantize(quantized.rows[j].rgbb, 5).rgb;
	    endPoint.rows[j].a = 0xFF;    

        quantized.rows[j] <<= 3;
    }
    return quantized;
}
Matrix2x4 compress_endpoints3( inout Matrix2x4 endPoint, uvec2 P )
{
    Matrix2x4 quantized;
    for ( uint j = 0; j < 2; j ++ )
    {
        quantized.rows[j].rgb = endPoint.rows[j].rgb & 0xFFFFFFFE;
	    quantized.rows[j].rgb |= P[j];
        quantized.rows[j].a = 0xFF;
        
        endPoint.rows[j].rgb = quantized.rows[j].rgb;
        endPoint.rows[j].a = 0xFF;
    }
    return quantized;
}
Matrix2x4 compress_endpoints4( inout Matrix2x4 endPoint )
{
    Matrix2x4 quantized;
    for ( uint j = 0; j < 2; j ++ )
    {
        quantized.rows[j].rgb = quantize(endPoint.rows[j].rgbb, 5).rgb;
        quantized.rows[j].a = quantize(endPoint.rows[j].a, 6).r;
        
        endPoint.rows[j].rgb = unquantize(quantized.rows[j].rgbb, 5).rgb;        
        endPoint.rows[j].a = unquantize(quantized.rows[j].a, 6).r;

        quantized.rows[j].rgb <<= 3;
        quantized.rows[j].a <<= 2;
    }    
    return quantized;
}
Matrix2x4 compress_endpoints5( inout Matrix2x4 endPoint )
{
    Matrix2x4 quantized;
    for ( uint j = 0; j < 2; j ++ )
    {
        quantized.rows[j].rgb = quantize(endPoint.rows[j].rgbb, 7).rgb;
        quantized.rows[j].a = endPoint.rows[j].a;

        endPoint.rows[j].rgb = unquantize(quantized.rows[j].rgbb, 7).rgb;
        // endPoint.rows[j].a   Alpha is full precision

        quantized.rows[j].rgb <<= 1;
    }    
    return quantized;
}
Matrix2x4 compress_endpoints6(inout Matrix2x4 endPoint, uvec2 P)
{
    Matrix2x4 quantized;
    for ( uint j = 0; j < 2; j ++ )
    {
        quantized.rows[j] = endPoint.rows[j] & 0xFFFFFFFE;
	    quantized.rows[j] |= P[j];
	        
        endPoint.rows[j] = quantized.rows[j];
    }
    return quantized;
}
Matrix2x4 compress_endpoints7( inout Matrix2x4 endPoint, uvec2 P )
{
    Matrix2x4 quantized;
    for ( uint j = 0; j < 2; j ++ )
    {
        quantized.rows[j] = quantize(endPoint.rows[j], 6) & 0xFFFFFFFE;
	    quantized.rows[j] |= P[j];

        endPoint.rows[j] = unquantize(quantized.rows[j], 6);
    }
    quantized.rows[0] = quantized.rows[0] << 2;
    quantized.rows[1] = quantized.rows[1] << 2;
    return quantized;
}